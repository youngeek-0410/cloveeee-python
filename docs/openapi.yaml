openapi: 3.0.3
info:
  title: YounGeek HackU Kosen 2022 - OpenAPI 3.0
  description: |-
    HackU Kosen 2022 でYounGeekが実装するAPIスキーマ
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: our HackU Kosen 2022 Repository
  url: https://github.com/youngeek-0410/hacku-kosen-2022
servers:
  - url: http://localhost:8080
paths:
  /api/projects:
    post:
      tags:
        - project
      requestBody:
        description: Post name of receiver in project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
  /api/projects/{project_id}:          
    get:
      tags:
        - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: text_message_limit
          description: 取得するテキストメッセージの数
          in: query
          required: true
          schema:
            type: integer
        - name: image_message_limit
          description: 取得する画像メッセージの数
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'  
  /api/projects/{project_id}/message:
    post:
      tags:
        - message
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Post new message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
        required: true
      responses:
        '200':
          description: Successful operation
  /api/projects/{project_id}/spotify_music:
    put:
      description: 指定のSpotifyMusicを指定のProjectに登録する
      tags:
        - spotify_music
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Registered Spotify Music data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSpotifyMusicReqest'
        required: true
      responses:
        '200':
          description: Successful operation
  /api/projects/{project_id}/top_text:
    put:
      description: 指定のトップテキストをProjectに登録する
      tags:
        - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Registered Spotify Music data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTopTextRequest'
        required: true
      responses:
        '200':
          description: Successful operation
  /api/projects/{project_id}/top_image:
    put:
      description: 指定のトップ画像をProjectに登録する
      tags:
        - project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Registered Spotify Music data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTopImageRequest'
        required: true
      responses:
        '200':
          description: Successful operation
  /api/projects/{project_id}/text_messages:
    get:
      tags:
        - message
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTextMessagesResponse'
  /api/projects/{project_id}/image_messages:
    get:
      tags:
        - message
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImageMessagesResponse'  
components:
  schemas:
    CreateProjectRequest:
      type: object
      required: 
        - receiver_name
      properties:
        receiver_name:
          type: string
          description: デジタル色紙を渡す相手の名前
          maxLength: 36
          example: 山田 太郎
    CreateProjectResponse:
      type: object
      required: 
        - project_id
      properties:
        project_id:
          type: string
          description: 作成されたプロジェクトのID
          example: a38ioje
    GetProjectResponse:
      type: object
      required:
        - project_id
        - receiver_name
      properties:
        project_id:
          type: string
          description: プロジェクトのID
          example: a38ioje
        receiver_name:
          type: string
          description: デジタル色紙を渡す相手の名前
          maxLength: 36
          example: 山田 太郎
        spotify_music:
          $ref: "#/components/schemas/SpotifyMusic"
        top_text:
          type: string
          description: 閲覧面ページの一番上に表示する文章。他のメッセージよりも大きく表示される。
          maxLength: 36
          example: "3年間お疲れ様でした！"
        top_image_url:
         type: object
         description: 閲覧面ページの一番上に表示する画像。他の画像とは独立して表示される。
         properties:
           url:
             type: string
             example: "https://example.com/image"
        text_messages:
          type: object
          properties:
            count:
              type: integer
              description: メッセージ件数
              example: 1
            items:
              type: array
              items:
                type: object
                properties:
                  text:
                    type: string
                    description: メッセージ本文
                    example: おっつー
                  sender_name:
                    type: string
                    description: 送信者
                    example: 山田 圭祐
        image_messages:
          type: object
          properties:
            count:
              type: integer
              description: メッセージ件数
              example: 1
            items:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                    description: 画像URL
                    example: https://
                  width:
                    type: integer
                    description: 画像の幅(px)
                    example: 1200
                  height:
                    type: integer
                    description: 画像の高さ(px)
                    example: 600
                  sender_name:
                    type: string
                    description: 送信者
                    example: 山田 圭祐
    CreateMessageRequest:
      type: object
      required: 
        - text
        - sender_name
      properties:
        text:
          type: string
          description: 送信するテキストメッセージ
          maxLength: 256
          example: おっつー
        images:
          type: string
          description: 送信するすべての画像をzip化してさらにBase64エンコードした文字列
          example: 全画像をzip化してさらにBASE64エンコードした文字列
        sender_name:
          type: string
          description: 送信者の名前
          maxLength: 36
          example: 山田 圭祐
    RegisterSpotifyMusicReqest:
      $ref: "#/components/schemas/SpotifyMusic"
    SpotifyMusic:
      type: object
      properties:
        uri:
          type: string
          description: 楽曲を識別するURI
          example: "uri:ljadjoihjgsadih"
        name:
          type: string
          description: 楽曲名
          example: ジョジョ~その血の運命~
        external_url:
          type: string
          description: SpotifyページへのURL
          example: https://spotify.com/...
        preview_url:
          type: string
          description: サンプル30秒の音声データのURL
          example: https://spotify.com/...
        artist:
          type: object
          description: アーティスト情報
          properties:
            name:
              type: string
              description: アーティスト名
              example: 富永TOMMY弘明
            external_url:
              type: string
              description: SpotifyページへのURL
              example: https://spotify.com/...
        album:
          type: object
          description: アルバム情報
          properties:
            name:
              type: string
              description: アルバム名
              example: ジョジョ~その血の運命~
            image_url:
              type: string
              description: カバー画像のURL
              example: https://spotify.com/...
    GetTextMessagesResponse:
      type: object
      properties:
        count:
          type: integer
          description: すべてのテキストの件数
          example: 10
        items:
          type: array
          items:
            type: object
            properties:
              text: 
                type: string
                description: テキストメッセージの本文
                example: おつかれ
              sender_name:
                type: string
                description: テキストメッセージ送信者
                example: 山田 花子
    GetImageMessagesResponse:
      type: object
      properties:
        count:
          type: integer
          description: すべての画像の件数
          example: 15
        items:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                description: 画像のURL
                example: https://
              width:
                type: integer
                description: 画像の幅(px)
                example: 1200
              height:
                type: integer
                description: 画像の高さ(px)
                example: 600
              sender_name:
                type: string
                description: 送信者
    RegisterTopTextRequest:
      type: object
      properties:
        top_text:
          type: string
          description: 閲覧面ページの一番上に表示する文章。他のメッセージよりも大きく表示される。
          maxLength: 36
          example: "3年間お疲れ様でした！"
    RegisterTopImageRequest:
      type: object
      properties:
        top_image_url:
         type: string
         description: 閲覧面ページの一番上に表示する画像。他の画像とは独立して表示される。
         example: "https://example.com/image"
